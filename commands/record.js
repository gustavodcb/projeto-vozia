const { joinVoiceChannel, EndBehaviorType } = require('@discordjs/voice');
const fs = require('fs');
const path = require('path');
const prism = require('prism-media');
const { pipeline } = require('stream');
const { activeRecordings } = require('../index.js'); // Importa o estado global
const { iniciarReuniao } = require('../database/dbManager.js'); // Importa a fun√ß√£o do DB

module.exports = {
  name: 'record',
  description: 'Inicia uma nova grava√ß√£o, registrando-a no banco de dados.',
  async execute(message) {
    const voiceChannel = message.member.voice.channel;
    if (!voiceChannel) {
      return message.reply('‚ùå Voc√™ precisa estar em um canal de voz para iniciar uma grava√ß√£o!');
    }

    // Verifica se j√° existe uma grava√ß√£o ativa neste servidor
    if (activeRecordings.has(message.guild.id)) {
      return message.reply('‚ö†Ô∏è Uma grava√ß√£o j√° est√° em andamento neste servidor.');
    }

    try {
      // --- 1. INTEGRA√á√ÉO COM O BANCO DE DADOS ---
      await message.reply('Iniciando uma nova reuni√£o... Registrando participantes no banco de dados.');
      
      const participantes = voiceChannel.members.map(member => ({
        id: member.id,
        username: member.user.username,
      }));

      // Chama a fun√ß√£o para criar a reuni√£o e registrar quem est√° presente no in√≠cio
      const tituloReuniao = `Reuni√£o em ${voiceChannel.name} - ${new Date().toLocaleString()}`;
      const idReuniao = await iniciarReuniao(tituloReuniao, voiceChannel.name, participantes);
      
      await message.channel.send(`‚úÖ Reuni√£o registrada com ID: \`${idReuniao}\`. Iniciando grava√ß√£o de √°udio...`);

      // --- 2. L√ìGICA DE GRAVA√á√ÉO (MODIFICADA) ---
      const connection = joinVoiceChannel({
        channelId: voiceChannel.id,
        guildId: message.guild.id,
        adapterCreator: message.guild.voiceAdapterCreator,
        selfDeaf: false, // O bot precisa "ouvir"
      });

      const receiver = connection.receiver;
      const recordingsDir = path.resolve(__dirname, '../recordings');
      if (!fs.existsSync(recordingsDir)) fs.mkdirSync(recordingsDir);

      const userStreams = new Map(); // Mapa para guardar os streams de cada usu√°rio

      // Grava o √°udio de cada participante em seu pr√≥prio arquivo PCM
      for (const [userId, member] of voiceChannel.members) {
        const opusStream = receiver.subscribe(userId, {
          end: {
            behavior: EndBehaviorType.AfterSilence,
            duration: 200, // Um sil√™ncio curto para n√£o cortar o √°udio no meio de frases
          },
        });

        // O nome do arquivo agora inclui o ID da reuni√£o, para agruparmos depois
        const pcmPath = path.join(recordingsDir, `${idReuniao}-${userId}.pcm`);
        const outputStream = fs.createWriteStream(pcmPath, { flags: 'a' }); // 'a' para anexar, caso o usu√°rio pare e volte a falar
        
        userStreams.set(userId, outputStream);

        const decoder = new prism.opus.Decoder({ rate: 48000, channels: 1, frameSize: 960 }); // Usar MONO (channels: 1) para facilitar a mixagem

        pipeline(opusStream, decoder, outputStream, (err) => {
          if (err) console.error(`Erro no pipeline do usu√°rio ${userId}:`, err);
        });
      }

      // --- 3. GERENCIAMENTO DE ESTADO ---
      activeRecordings.set(message.guild.id, {
        reuniaoId: idReuniao,
        connection: connection,
        userStreams: userStreams, // Guarda as refer√™ncias dos streams para poder fech√°-los
        participantes: participantes // Guarda quem estava na reuni√£o
      });
      
      message.channel.send('üéôÔ∏è **Grava√ß√£o iniciada!** Todos os participantes no canal est√£o sendo gravados. Use `!stop` para finalizar.');

    } catch (error) {
      console.error('Erro ao iniciar a grava√ß√£o:', error);
      message.reply('‚ùå Ocorreu um erro cr√≠tico ao iniciar a grava√ß√£o. Verifique os logs.');
      // Limpa o estado se a inicializa√ß√£o falhar
      if (activeRecordings.has(message.guild.id)) {
        activeRecordings.get(message.guild.id).connection.destroy();
        activeRecordings.delete(message.guild.id);
      }
    }
  },
};