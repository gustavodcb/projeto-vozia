// database/dbManager.js

const pool = require('./db'); // Seu arquivo de conex√£o com o banco
const getEmbedding = require('../services/embeddingService'); // O servi√ßo para gerar embeddings (agora usando Google AI)

/**
 * Cria uma nova reuni√£o no banco de dados e registra os participantes iniciais.
 * Esta vers√£o √© otimizada para usar "ON CONFLICT" e evitar queries desnecess√°rias.
 * @param {string} titulo O t√≠tulo para a reuni√£o.
 * @param {string} canal O nome do canal de voz.
 * @param {Array<{id: string, username: string}>} participantes Um array de objetos de participantes.
 * @returns {Promise<number>} O ID da reuni√£o rec√©m-criada.
 */
async function iniciarReuniao(titulo, canal, participantes) {
    const client = await pool.connect();
    try {
        await client.query('BEGIN'); // Inicia uma transa√ß√£o para garantir que todas as opera√ß√µes funcionem ou falhem juntas

        // 1. Cria a reuni√£o
        const resReuniao = await client.query(
            'INSERT INTO reuniao (titulo, canal_chamada) VALUES ($1, $2) RETURNING id',
            [titulo, canal]
        );
        const idReuniao = resReuniao.rows[0].id;

        // 2. Insere/Verifica usu√°rios e os associa √† reuni√£o
        for (const user of participantes) {
            // Otimiza√ß√£o: Esta query √∫nica insere o usu√°rio APENAS se ele n√£o existir.
            // O 'ON CONFLICT (id) DO NOTHING' previne erros se o usu√°rio j√° estiver na tabela,
            // tornando o 'SELECT' anterior desnecess√°rio.
            await client.query(
                'INSERT INTO usuario (id, nome) VALUES ($1, $2) ON CONFLICT (id) DO NOTHING',
                [user.id, user.username]
            );

            // Associa o usu√°rio √† reuni√£o na tabela 'participou'
            await client.query(
                'INSERT INTO participou (id_usuario, id_reuniao) VALUES ($1, $2)',
                [user.id, idReuniao]
            );
        }

        await client.query('COMMIT'); // Confirma todas as opera√ß√µes da transa√ß√£o se tudo deu certo
        console.log(`‚úÖ Reuni√£o ${idReuniao} iniciada com sucesso.`);
        return idReuniao; 

    } catch (e) {
        await client.query('ROLLBACK'); // Desfaz tudo em caso de qualquer erro
        console.error('‚ùå Erro ao iniciar reuni√£o, revertendo transa√ß√£o.', e);
        throw e; // Propaga o erro para o comando saber que falhou
    } finally {
        client.release(); // ESSENCIAL: Libera a conex√£o de volta para o pool para ser reutilizada
    }
}

/**
 * Salva uma √∫nica fala transcrita, gerando seu embedding antes de inserir.
 * @param {number} idReuniao O ID da reuni√£o.
 * @param {string} idUsuario O ID (BIGINT) do usu√°rio do Discord que falou.
 * @param {string} textoFala O texto transcrito da fala.
 */
async function salvarFala(idReuniao, idUsuario, textoFala) {
    try {
        // 1. Gera o embedding para o texto da fala usando nosso servi√ßo
        const embedding = await getEmbedding(textoFala);

        // 2. Converte o array de embedding para o formato de string esperado pelo pgvector: '[1.23,4.56,...]'
        // Isso √© necess√°rio para que o PostgreSQL entenda que √© um vetor.
        const embeddingString = `[${embedding.join(',')}]`;

        // 3. Insere tudo na tabela de transcricoes
        await pool.query(
            // CORRE√á√ÉO: A query agora insere a 'embeddingString', n√£o o objeto 'embedding'
            'INSERT INTO transcricoes (id_reuniao, id_usuario, texto_fala, embedding) VALUES ($1, $2, $3, $4)',
            [idReuniao, idUsuario, textoFala, embeddingString]
        );
        console.log(`üó£Ô∏è Fala salva para o usu√°rio ${idUsuario} na reuni√£o ${idReuniao}`);

    } catch (e) {
        console.error('‚ùå Erro ao salvar fala e embedding:', e);
        throw e;
    }
}

// Exporta as fun√ß√µes para serem usadas nos seus comandos
module.exports = {
    iniciarReuniao,
    salvarFala,
};